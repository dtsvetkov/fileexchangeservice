//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FileExchangerClient.FileExchangeService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ResponseInfo", Namespace="http://schemas.datacontract.org/2004/07/FileExchangeService")]
    [System.SerializableAttribute()]
    public partial class ResponseInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private FileExchangerClient.FileExchangeService.ErrorCode ErrorCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public FileExchangerClient.FileExchangeService.ErrorCode ErrorCode {
            get {
                return this.ErrorCodeField;
            }
            set {
                if ((this.ErrorCodeField.Equals(value) != true)) {
                    this.ErrorCodeField = value;
                    this.RaisePropertyChanged("ErrorCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ErrorCode", Namespace="http://schemas.datacontract.org/2004/07/FileExchangeService")]
    public enum ErrorCode : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NoError = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InternalError = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="FileExchangeService.IFileExchangeService")]
    public interface IFileExchangeService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileExchangeService/GetFilesList", ReplyAction="http://tempuri.org/IFileExchangeService/GetFilesListResponse")]
        string[] GetFilesList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileExchangeService/GetFilesList", ReplyAction="http://tempuri.org/IFileExchangeService/GetFilesListResponse")]
        System.Threading.Tasks.Task<string[]> GetFilesListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileExchangeService/GetFileInfo", ReplyAction="http://tempuri.org/IFileExchangeService/GetFileInfoResponse")]
        System.IO.FileInfo GetFileInfo(string fileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileExchangeService/GetFileInfo", ReplyAction="http://tempuri.org/IFileExchangeService/GetFileInfoResponse")]
        System.Threading.Tasks.Task<System.IO.FileInfo> GetFileInfoAsync(string fileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileExchangeService/GetFileChunk", ReplyAction="http://tempuri.org/IFileExchangeService/GetFileChunkResponse")]
        byte[] GetFileChunk(string fileName, int offset, int length);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileExchangeService/GetFileChunk", ReplyAction="http://tempuri.org/IFileExchangeService/GetFileChunkResponse")]
        System.Threading.Tasks.Task<byte[]> GetFileChunkAsync(string fileName, int offset, int length);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileExchangeService/CreateFile", ReplyAction="http://tempuri.org/IFileExchangeService/CreateFileResponse")]
        FileExchangerClient.FileExchangeService.ResponseInfo CreateFile(string fileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileExchangeService/CreateFile", ReplyAction="http://tempuri.org/IFileExchangeService/CreateFileResponse")]
        System.Threading.Tasks.Task<FileExchangerClient.FileExchangeService.ResponseInfo> CreateFileAsync(string fileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileExchangeService/LoadFileChunk", ReplyAction="http://tempuri.org/IFileExchangeService/LoadFileChunkResponse")]
        FileExchangerClient.FileExchangeService.ResponseInfo LoadFileChunk(string fileName, byte[] bytes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileExchangeService/LoadFileChunk", ReplyAction="http://tempuri.org/IFileExchangeService/LoadFileChunkResponse")]
        System.Threading.Tasks.Task<FileExchangerClient.FileExchangeService.ResponseInfo> LoadFileChunkAsync(string fileName, byte[] bytes);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFileExchangeServiceChannel : FileExchangerClient.FileExchangeService.IFileExchangeService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FileExchangeServiceClient : System.ServiceModel.ClientBase<FileExchangerClient.FileExchangeService.IFileExchangeService>, FileExchangerClient.FileExchangeService.IFileExchangeService {
        
        public FileExchangeServiceClient() {
        }
        
        public FileExchangeServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FileExchangeServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FileExchangeServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FileExchangeServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string[] GetFilesList() {
            return base.Channel.GetFilesList();
        }
        
        public System.Threading.Tasks.Task<string[]> GetFilesListAsync() {
            return base.Channel.GetFilesListAsync();
        }
        
        public System.IO.FileInfo GetFileInfo(string fileName) {
            return base.Channel.GetFileInfo(fileName);
        }
        
        public System.Threading.Tasks.Task<System.IO.FileInfo> GetFileInfoAsync(string fileName) {
            return base.Channel.GetFileInfoAsync(fileName);
        }
        
        public byte[] GetFileChunk(string fileName, int offset, int length) {
            return base.Channel.GetFileChunk(fileName, offset, length);
        }
        
        public System.Threading.Tasks.Task<byte[]> GetFileChunkAsync(string fileName, int offset, int length) {
            return base.Channel.GetFileChunkAsync(fileName, offset, length);
        }
        
        public FileExchangerClient.FileExchangeService.ResponseInfo CreateFile(string fileName) {
            return base.Channel.CreateFile(fileName);
        }
        
        public System.Threading.Tasks.Task<FileExchangerClient.FileExchangeService.ResponseInfo> CreateFileAsync(string fileName) {
            return base.Channel.CreateFileAsync(fileName);
        }
        
        public FileExchangerClient.FileExchangeService.ResponseInfo LoadFileChunk(string fileName, byte[] bytes) {
            return base.Channel.LoadFileChunk(fileName, bytes);
        }
        
        public System.Threading.Tasks.Task<FileExchangerClient.FileExchangeService.ResponseInfo> LoadFileChunkAsync(string fileName, byte[] bytes) {
            return base.Channel.LoadFileChunkAsync(fileName, bytes);
        }
    }
}
